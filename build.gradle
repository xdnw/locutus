import io.github.kobylynskyi.graphql.codegen.gradle.GraphQLCodegenGradleTask

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
//        classpath "io.jooby:jooby-gradle-plugin:2.8.5"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath 'org.jooq:jooq-codegen:3.17.5'
        classpath 'org.xerial:sqlite-jdbc:3.36.0.3'
    }
}

plugins {
    id 'java'
    id "idea"
    id "nu.studer.rocker" version "3.0.4"
    id "io.github.kobylynskyi.graphql.codegen" version "5.4.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "nu.studer.jooq" version "8.0"
}

apply plugin: "kotlin"
apply plugin: 'java'

group 'link.locutus'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-releases/"
    }
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
//    maven {
//        name = "GitHubPackages-pw4j"
//        url "https://maven.pkg.github.com/l0llygag/pw4j"
//        credentials {
//            username = System.getenv("GITHUB_USERNAME")
//            password = System.getenv("GITHUB_TOKEN")
//        }
//    }
    flatDir {
        dirs 'libs'
    }
    gradlePluginPortal()
}

compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'

dependencies {
    implementation 'com.pusher:pusher-java-client:2.3.0-beta'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    implementation "org.xerial:sqlite-jdbc:3.30.1"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation 'org.jsoup:jsoup:1.12.1'
    implementation 'org.bitbucket.cowwoc:diff-match-patch:1.2'

    implementation ('net.dv8tion:JDA:5.0.0-alpha.5') {
//        implementation 'club.minnced:discord-webhooks:4.2.0_182'
        exclude module: 'opus-java'
    }
    implementation group: 'club.minnced', name: 'discord-webhooks', version: '0.7.2'


    implementation 'io.javalin:javalin:4.0.0.RC3'
    implementation 'io.javalin:javalin-parent:4.0.0.RC3'
    implementation 'io.javalin:javalin-bundle:4.0.0.RC3'

    implementation 'com.ptsmods:mysqlw:1.7'
    implementation 'org.openjdk.nashorn:nashorn-core:15.4'

    implementation 'com.google.api-client:google-api-client:1.33.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.32.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20210629-1.32.1'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20211107-1.32.1'
    implementation 'de.erichseifert.gral:gral-core:0.11'

    implementation 'org.kefirsf:kefirbb:1.5'
    implementation 'com.inversoft:prime-transformer:2.1.4'

    // https://mvnrepository.com/artifact/gnu.trove/trove
    implementation group: 'gnu.trove', name: 'trove', version: '3.0.3'
    // https://mvnrepository.com/artifact/com.overzealous/remark
    implementation group: 'com.overzealous', name: 'remark', version: '1.0.0'
    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.1'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation group: 'com.opencsv', name: 'opencsv', version: '3.7'

    implementation group: 'com.fizzed', name: 'rocker-runtime', version: '1.3.0'
    implementation 'com.fizzed:rocker-compiler:1.3.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"


    implementation "org.springframework.boot:spring-boot-starter-web:2.4.4"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:2.4.4"

    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:11.0.0"
    implementation "com.graphql-java-kickstart:graphiql-spring-boot-starter:11.0.0"

    implementation "com.graphql-java:graphql-java-extended-scalars:16.0.1"
    implementation "io.github.kobylynskyi:graphql-java-codegen:5.4.0"

    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "javax.validation:validation-api:2.0.1.Final"

    implementation "org.mapstruct:mapstruct:1.4.2.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.2.2'

    // https://mvnrepository.com/artifact/de.siegmar/fastcsv
    implementation group: 'de.siegmar', name: 'fastcsv', version: '2.2.0'

    implementation('org.xerial:sqlite-jdbc:3.40.0.0')
    implementation('org.hibernate:hibernate-core:6.1.5.Final')
    implementation('org.hibernate:hibernate-community-dialects:6.1.5.Final')

    implementation('org.jooq:jooq:3.17.5')
    implementation("org.jooq:jooq-meta:3.17.5")
    implementation("org.jooq:jooq-codegen:3.17.5")

    jooqGenerator 'org.xerial:sqlite-jdbc:3.36.0.3'

}

rocker {
    version = '1.3.0'
    configurations {
        main {
//            optimize = true
            templateDir = file('src/views')
            outputDir = file("$buildDir/generated-src/views")
        }
    }
}

jooq {
    version = "3.17.5"  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)
    configurations {
        bank {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/bank.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {

                        packageName = 'org.example.jooq.bank'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        locutus {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/locutus.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.locutus'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        nations {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/nations.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.nations'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        trade {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/trade.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.trade'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        war {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/war.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.war'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        web {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/web.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.web'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}


/**
 * Generate requests and model from external service
 */

compileJava.dependsOn "graphqlCodegenProductService"
task graphqlCodegenProductService(type: GraphQLCodegenGradleTask) {
    graphqlSchemas.includePattern = "schema\\.graphqls"
    outputDir = new File("$buildDir/generated")
    modelPackageName = "com.politicsandwar.graphql.model"
    customTypesMapping = [
            Date: "java.util.Date",
            DateTime: "java.util.Date",
            DateTimeAuto: "java.time.Instant"
    ]
    useObjectMapperForRequestSerialization = [
            "DateTime",
            "DateTimeAuto",
            "java.util.Date",
    ]
    parentInterfaces {
        queryResolver = "graphql.kickstart.tools.GraphQLQueryResolver"
        mutationResolver = "graphql.kickstart.tools.GraphQLMutationResolver"
        subscriptionResolver = "graphql.kickstart.tools.GraphQLSubscriptionResolver"
        resolver = "graphql.kickstart.tools.GraphQLResolver<{{TYPE}}>"
    }
    generateApis = true
    generateClient = true
    generateParameterizedFieldsResolvers = false
    generateBuilder = true
    generateToString = true

    supportUnknownFields = true
    unknownFieldsPropertyName = "additionalFields"
}

sourceSets {
    main {
        java {
            srcDirs 'src'
            srcDirs "$buildDir/generated"
            srcDirs "$buildDir/generated-src"
        }
        resources {
            srcDirs "src/main/resources/css"
            srcDirs "src/main/resources/js"
            srcDirs "src/main/resources/img"
        }
    }
}

//sourceSets.main.java.srcDirs (
//        tasks.named('generateBankJooq').flatMap { it.outputDir },
//        tasks.named('generateLocutusJooq').flatMap { it.outputDir },
//        tasks.named('generateNationsJooq').flatMap { it.outputDir },
//        tasks.named('generateTradeJooq').flatMap { it.outputDir },
//        tasks.named('generateWarJooq').flatMap { it.outputDir },
//        tasks.named('generateWebJooq').flatMap { it.outputDir }
//)

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class': 'link.locutus.discord.Locutus'
        )
    }
}

shadowJar {
//    minimize()
    zip64=true
    archiveName = "${name}-${project.name}-${version}.jar"
}

build.dependsOn(shadowJar);
