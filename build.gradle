import io.github.kobylynskyi.graphql.codegen.gradle.GraphQLCodegenGradleTask
import nu.studer.gradle.jooq.JooqEdition

buildscript {
//    ext.kotlin_version = '2.2.20'
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
//        classpath "io.jooby:jooby-gradle-plugin:2.8.5"
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jooq:jooq-codegen:3.19.13'
        classpath 'org.xerial:sqlite-jdbc:3.50.3.0'
        classpath 'com.gradleup.shadow:shadow-gradle-plugin:8.3.0'
    }
}

plugins {
    id 'java'
//    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id "idea"
    id "io.github.kobylynskyi.graphql.codegen" version "5.4.0"
    id 'com.gradleup.shadow' version '8.3.0'
    id "nu.studer.jooq" version "9.0"
    id 'maven-publish'
    id "gg.jte.gradle" version "3.2.1"
    id 'cz.habarta.typescript-generator' version '3.2.1263'
    id "com.github.ben-manes.versions" version "0.51.0"
}

group 'link.locutus'
version '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

tasks.named('generateTypeScript') {
    jsonLibrary = 'jackson2'
    classes = [
            'link.locutus.discord.web.commands.binding.value_types.CacheType',
            'link.locutus.discord.web.commands.binding.value_types.CoalitionGraph',
            'link.locutus.discord.web.commands.binding.value_types.CoalitionGraphs',
            'link.locutus.discord.web.commands.binding.value_types.DiscordRole',
            'link.locutus.discord.web.commands.binding.value_types.GraphType',
            'link.locutus.discord.web.commands.binding.value_types.NationTaxInfo',
            'link.locutus.discord.web.commands.binding.value_types.SetGuild',
            'link.locutus.discord.web.commands.binding.value_types.TaxExpenseBracket',
            'link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson',
            'link.locutus.discord.web.commands.binding.value_types.WebAnnouncement',
            'link.locutus.discord.web.commands.binding.value_types.WebAnnouncements',
            'link.locutus.discord.web.commands.binding.value_types.WebAudit',
            'link.locutus.discord.web.commands.binding.value_types.WebAudits',
            'link.locutus.discord.web.commands.binding.value_types.WebBalance',
            'link.locutus.discord.web.commands.binding.value_types.WebBankAccess',
            'link.locutus.discord.web.commands.binding.value_types.WebBulkQuery',
            'link.locutus.discord.web.commands.binding.value_types.WebGraph',
            'link.locutus.discord.web.commands.binding.value_types.WebInt',
            'link.locutus.discord.web.commands.binding.value_types.WebMyEnemies',
            'link.locutus.discord.web.commands.binding.value_types.WebMyWar',
            'link.locutus.discord.web.commands.binding.value_types.WebMyWars',
            'link.locutus.discord.web.commands.binding.value_types.WebOptions',
            'link.locutus.discord.web.commands.binding.value_types.WebSession',
            'link.locutus.discord.web.commands.binding.value_types.WebSuccess',
            'link.locutus.discord.web.commands.binding.value_types.WebTable',
            'link.locutus.discord.web.commands.binding.value_types.WebTableError',
            'link.locutus.discord.web.commands.binding.value_types.WebTarget',
            'link.locutus.discord.web.commands.binding.value_types.WebViewCommand',
            'link.locutus.discord.web.commands.binding.value_types.WebTargets',
            'link.locutus.discord.web.commands.binding.value_types.WebTransaction',
            'link.locutus.discord.web.commands.binding.value_types.WebTransferResult',
            'link.locutus.discord.web.commands.binding.value_types.WebUrl',
            'link.locutus.discord.web.commands.binding.value_types.WebValue',
            'link.locutus.discord.web.commands.binding.value_types.WebWarFinder',
            'link.locutus.discord.web.commands.binding.value_types.TaxExpenses',
            'link.locutus.discord.web.commands.binding.value_types.WebPermission',
            'link.locutus.discord.util.task.multi.MultiResult',
            'link.locutus.discord.util.task.multi.NetworkRow',
            'link.locutus.discord.util.task.multi.SameNetworkTrade',
            'link.locutus.discord.util.task.multi.AdvMultiReport',
            'link.locutus.discord.util.task.multi.AdvMultiRow',
    ]
    outputKind = 'module'
    nullableAnnotations = ['org.checkerframework.checker.nullness.qual.Nullable']
    nullabilityDefinition = 'undefinedInlineUnion'
    // set output file
    outputFile = file('../lc_cmd_react/src/lib/apitypes.d.ts')
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/xdnw/locutus"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

def brotliVersion = "1.20.0"

dependencies {
    implementation 'org.msgpack:msgpack-core:0.9.10'
    implementation 'org.msgpack:jackson-dataformat-msgpack:0.9.10'
    implementation 'org.lz4:lz4-java:1.8.0'
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    implementation 'org.jgrapht:jgrapht-core:1.5.2'
    implementation 'org.jgrapht:jgrapht-ext:1.5.2'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.788')
    implementation 'com.amazonaws:aws-java-sdk-s3'

    implementation platform('org.apache.logging.log4j:log4j-bom:2.23.1')
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-api'

    implementation 'commons-logging:commons-logging:1.3.5'
    implementation("org.slf4j:slf4j-simple:2.1.0-alpha1")

    implementation 'com.pusher:pusher-java-client:2.4.4'

    implementation 'de.vandermeer:asciitable:0.3.2'

    implementation 'com.google.http-client:google-http-client-jackson2:1.47.1'

    implementation('org.xerial:sqlite-jdbc:3.50.3.0')
    jooqGenerator 'org.xerial:sqlite-jdbc:3.50.3.0'

    implementation 'com.google.code.gson:gson:2.13.1'
    implementation 'org.jsoup:jsoup:1.21.1'
    implementation 'org.bitbucket.cowwoc:diff-match-patch:1.2'

    implementation ('net.dv8tion:JDA:6.0.0-rc.2') {
        exclude module: 'opus-java'
    }
    implementation group: 'club.minnced', name: 'discord-webhooks', version: '0.8.4'


    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'gg.jte:jte:3.2.1'
    implementation 'gg.jte:jte-watcher:3.2.1'
    implementation 'io.javalin:javalin:6.7.0'
    implementation 'io.javalin.community.ssl:ssl-plugin:6.7.0'
    implementation 'io.javalin:javalin-rendering:6.7.0'

    implementation "com.aayushatharva.brotli4j:brotli4j:$brotliVersion"
    runtimeOnly("""com.aayushatharva.brotli4j:native-windows-x86_64:$brotliVersion""")

    implementation 'com.ptsmods:mysqlw:1.9.2'
    implementation 'org.openjdk.nashorn:nashorn-core:15.6'

    implementation 'de.erichseifert.gral:gral-core:0.11'

    implementation ('com.inversoft:prime-transformer:2.1.5') {
        exclude group: 'org.freemarker'
    }

    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.16'

    implementation group: 'com.opencsv', name: 'opencsv', version: '5.12.0'

    implementation 'in.wilsonl.minifyhtml:minify-html:0.15.0'

    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:11.1.0"


    implementation "io.github.kobylynskyi:graphql-java-codegen:5.4.0"

    implementation "org.apache.httpcomponents:httpclient:4.5.14"
    implementation "javax.validation:validation-api:2.0.1.Final"

//    implementation "org.mapstruct:mapstruct:1.4.2.Final"
//    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0-rc1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:3.0-rc5'

    implementation 'de.siegmar:fastcsv:4.0.0'


    implementation('org.jooq:jooq:3.19.13')
    jooqGenerator("org.jooq:jooq-meta:3.19.13")
    jooqGenerator("org.jooq:jooq-codegen:3.19.13")
    compileOnly "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"


    implementation 'com.openai:openai-java:3.1.2'

    implementation 'com.google.genai:google-genai:1.11.0'
    implementation 'com.google.api-client:google-api-client:2.8.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.39.0'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20250616-2.0.0'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20250723-2.0.0'
    implementation 'com.google.apis:google-api-services-docs:v1-rev20250325-2.0.0'

    implementation 'com.google.cloud:google-cloud-vision:3.70.0'
    implementation 'com.google.cloud:google-cloud-language:2.74.0'

    implementation 'com.knuddels:jtokkit:1.1.0'
    implementation platform("ai.djl:bom:0.34.0")
    implementation "ai.djl:api:0.34.0"
    runtimeOnly "ai.djl.pytorch:pytorch-engine:0.34.0"
    runtimeOnly "ai.djl.pytorch:pytorch-model-zoo:0.34.0"
    implementation "ai.djl.onnxruntime:onnxruntime-engine:0.34.0"
    implementation "ai.djl.huggingface:tokenizers:0.34.0"
    runtimeOnly 'ai.djl.pytorch:pytorch-native-cu124:2.5.1:win-x86_64'
    runtimeOnly 'ai.djl.pytorch:pytorch-jni:2.7.1-0.34.0'
    implementation 'ai.djl.sentencepiece:sentencepiece:0.34.0'
    implementation 'cn.easyproject:easyocr:3.0.4-RELEASE'
    implementation 'com.vdurmont:emoji-java:5.1.1'
    implementation 'info.debatty:java-string-similarity:2.0.0'
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'

        resolutionStrategy {
            cacheDynamicVersionsFor 24, 'hours'
            cacheChangingModulesFor 24, 'hours'
        }
    }

}

jooq {
    version = "3.19.13"  // default (can be omitted)
    edition = JooqEdition.OSS  // default (can be omitted)
    configurations {
        bank {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)
            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/bank.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {

                        packageName = 'org.example.jooq.bank'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        locutus {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/locutus.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.locutus'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        nations {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/nations.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.nations'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        trade {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/trade.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.trade'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        war {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/war.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.war'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        web {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/web.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.web'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

// Enable when wanting to generate the classes (I currently run it once then disable)
//sourceSets.main.java.srcDirs (
//        tasks.named('generateBankJooq').flatMap { it.outputDir },
//        tasks.named('generateLocutusJooq').flatMap { it.outputDir },
//        tasks.named('generateNationsJooq').flatMap { it.outputDir },
//        tasks.named('generateTradeJooq').flatMap { it.outputDir },
//        tasks.named('generateWarJooq').flatMap { it.outputDir },
//        tasks.named('generateWebJooq').flatMap { it.outputDir }
//)

/**
 * Generate requests and model from external service
 */

def graphqlSchemasDir = layout.projectDirectory.dir("src/main/resources/graphql")
def graphqlGeneratedDir = layout.buildDirectory.dir("generated/graphql")  // narrow, dedicated

tasks.named('graphqlCodegen', GraphQLCodegenGradleTask) {
    // Inputs (schemas)
    graphqlSchemas.rootDir = graphqlSchemasDir.asFile
    graphqlSchemas.includePattern = "schema\\.graphqls"   // adjust if multiple files

    // Output (only this dir is added to the source set)
    outputDir = graphqlGeneratedDir.get().asFile
    outputs.dir(graphqlGeneratedDir)  // ok to keep; ensures Gradle tracks it

    // Package / model settings
    modelPackageName = "com.politicsandwar.graphql.model"

    customTypesMapping = [
            Date         : "java.util.Date",
            DateTime     : "java.util.Date",
            DateTimeAuto : "java.time.Instant"
    ]
    useObjectMapperForRequestSerialization = [
            "DateTime",
            "DateTimeAuto",
            "java.util.Date",
    ]

    parentInterfaces {
        queryResolver        = "graphql.kickstart.tools.GraphQLQueryResolver"
        mutationResolver     = "graphql.kickstart.tools.GraphQLMutationResolver"
        subscriptionResolver = "graphql.kickstart.tools.GraphQLSubscriptionResolver"
        resolver             = "graphql.kickstart.tools.GraphQLResolver<{{TYPE}}>"
    }

    generateApis = true
    generateClient = true
    generateParameterizedFieldsResolvers = false
    generateBuilder = true
    generateToString = true
    supportUnknownFields = true
    unknownFieldsPropertyName = "additionalFields"

    // Precise incremental inputs
    inputs.files(fileTree(graphqlSchemasDir) {
        include("**/*.graphqls")
    }).withPropertyName("graphqlSchemas").withPathSensitivity(PathSensitivity.RELATIVE)

    // Capture config that affects output so Gradle knows when to rerun
    inputs.property("graphqlCodegenConfigFingerprint", [
            generateApis,
            generateClient,
            generateBuilder,
            modelPackageName,
            customTypesMapping.hashCode(),
            parentInterfaces.queryResolver,
            parentInterfaces.mutationResolver,
            parentInterfaces.subscriptionResolver
    ].join("|"))
}

tasks.withType(JavaCompile).configureEach {
    options.verbose = false
    options.debug = false // remove when debugging
    options.release = 22
    options.incremental = true
    options.fork = true
    options.forkOptions.memoryInitialSize = "1g"
    options.forkOptions.memoryMaximumSize = "3g"
    options.forkOptions.jvmArgs = ['-XX:+UseZGC']
    options.compilerArgs += [
            "-parameters",
            "-Xmaxerrs", "1000",
            "-proc:none"
    ]
}

// JTE setup with proper java.nio.file.Path usage and task selection
def explicitlyRequestsShadow = gradle.startParameter.taskNames.any { it == 'shadowJar' || it.endsWith(':shadowJar') }
def forcePrecompile = providers.gradleProperty('withJtePrecompile').isPresent()
def jteGeneratedDir = layout.buildDirectory.dir("generated-sources")

jte {
    // Avoid org.gradle.model.Path clash
    sourceDirectory = file("src/main/jte").toPath()
    targetDirectory = layout.buildDirectory.dir("generated-sources").get().asFile.toPath()

    if (explicitlyRequestsShadow || forcePrecompile) {
        precompile()
    } else {
        generate()
    }
}

tasks.named('shadowJar') {
    dependsOn tasks.matching { it.name == 'generateJte' || it.name == 'precompileJte' }

    zip64 = true
    archiveBaseName = "${name}-${project.name}"
    archiveClassifier.set('')
    from('src/main/resources') {
        include 'lib/win32-x86-amd64/brotli.dll'
    }
    manifest {
        attributes(
            'Main-Class': 'link.locutus.discord.Locutus'
        )
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

// Add generated sources explicitly
sourceSets.main.java.srcDir(graphqlGeneratedDir)
sourceSets.main.java.srcDir(jteGeneratedDir)

// Add generated JTE sources
tasks.named('compileJava') {
    dependsOn(tasks.named('graphqlCodegen'))
    mustRunAfter tasks.matching { it.name == 'generateJte' || it.name == 'precompileJte' }
}

tasks.register('findDependency') {
    doLast {
        configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dependency ->
            dependency.moduleArtifacts.each { artifact ->
                def id = artifact.moduleVersion.id
                if (id.name == 'ST4' || true) {
                    println "Group: ${id.group}, Name: ${id.name}, Version: ${id.version}"
//                    iterate dependency.children
                    for (child in dependency.children) {
                        println "Child: ${child}"
                    }
                }
            }
        }
    }
}