import io.github.kobylynskyi.graphql.codegen.gradle.GraphQLCodegenGradleTask
import nu.studer.gradle.jooq.JooqEdition

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
//        classpath "io.jooby:jooby-gradle-plugin:2.8.5"
        classpath 'org.jooq:jooq-codegen:3.19.13'
        classpath 'org.xerial:sqlite-jdbc:3.50.3.0'
        classpath 'com.gradleup.shadow:shadow-gradle-plugin:8.3.0'
    }
}

plugins {
//    id 'com.autonomousapps.dependency-analysis' version '3.0.2' apply false
//    id "com.github.ben-manes.versions" version "0.51.0"
    id 'application'
    id 'java'
    id "idea"
    id 'com.gradleup.shadow' version '8.3.0' apply false
    id "nu.studer.jooq" version "9.0" apply false
    id "io.github.kobylynskyi.graphql.codegen" version "5.4.0" apply false
    id 'cz.habarta.typescript-generator' version '3.2.1263' apply false
    id "gg.jte.gradle" version "3.2.1" apply false
}

application { mainClass = 'link.locutus.discord._test._Custom' }
tasks.register('runCustomMain', JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'link.locutus.discord._test._Custom'
    standardInput = System.in
    if (project.hasProperty('appArgs')) {
        args = project.property('appArgs').toString().split(/\s+/)
    }
}

def useJooq = providers.gradleProperty("jooq").isPresent()
def useTs = providers.gradleProperty("ts").isPresent()
def useShadow = gradle.startParameter.taskNames.any { it.endsWith("shadowJar") }
def useGraphql = providers.gradleProperty("graphql").isPresent() || useShadow
def useJtePrecompile = providers.gradleProperty("withJtePrecompile").isPresent() || useShadow

//subprojects {
//    // apply the analysis plugin to every subproject that builds code
//    apply plugin: 'com.autonomousapps.dependency-analysis'
//
//    // optional: configure the plugin per subproject if needed
//    dependencyAnalysis {
//        // example configuration
//        issues {
//            onAny {
//                severity('fail') // or 'warn' / 'ignore'
//            }
//        }
//    }
//}

group = 'link.locutus'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
        vendor = JvmVendorSpec.ADOPTIUM        // Or: JvmVendorSpec.AMAZON, AZUL, MICROSOFT, ORACLE
        implementation = JvmImplementation.VENDOR_SPECIFIC
    }
}

if (useTs) {
    tasks.named('generateTypeScript') {
        jsonLibrary = 'jackson2'
        classes = [
                'link.locutus.discord.web.commands.binding.value_types.CacheType',
                'link.locutus.discord.web.commands.binding.value_types.CoalitionGraph',
                'link.locutus.discord.web.commands.binding.value_types.CoalitionGraphs',
                'link.locutus.discord.web.commands.binding.value_types.DiscordRole',
                'link.locutus.discord.web.commands.binding.value_types.GraphType',
                'link.locutus.discord.web.commands.binding.value_types.NationTaxInfo',
                'link.locutus.discord.web.commands.binding.value_types.SetGuild',
                'link.locutus.discord.web.commands.binding.value_types.TaxExpenseBracket',
                'link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson',
                'link.locutus.discord.web.commands.binding.value_types.WebAnnouncement',
                'link.locutus.discord.web.commands.binding.value_types.WebAnnouncements',
                'link.locutus.discord.web.commands.binding.value_types.WebAudit',
                'link.locutus.discord.web.commands.binding.value_types.WebAudits',
                'link.locutus.discord.web.commands.binding.value_types.WebBalance',
                'link.locutus.discord.web.commands.binding.value_types.WebBankAccess',
                'link.locutus.discord.web.commands.binding.value_types.WebBulkQuery',
                'link.locutus.discord.web.commands.binding.value_types.WebGraph',
                'link.locutus.discord.web.commands.binding.value_types.WebInt',
                'link.locutus.discord.web.commands.binding.value_types.WebMyEnemies',
                'link.locutus.discord.web.commands.binding.value_types.WebMyWar',
                'link.locutus.discord.web.commands.binding.value_types.WebMyWars',
                'link.locutus.discord.web.commands.binding.value_types.WebOptions',
                'link.locutus.discord.web.commands.binding.value_types.WebSession',
                'link.locutus.discord.web.commands.binding.value_types.WebSuccess',
                'link.locutus.discord.web.commands.binding.value_types.WebTable',
                'link.locutus.discord.web.commands.binding.value_types.WebTableError',
                'link.locutus.discord.web.commands.binding.value_types.WebTarget',
                'link.locutus.discord.web.commands.binding.value_types.WebViewCommand',
                'link.locutus.discord.web.commands.binding.value_types.WebTargets',
                'link.locutus.discord.web.commands.binding.value_types.WebTransaction',
                'link.locutus.discord.web.commands.binding.value_types.WebTransferResult',
                'link.locutus.discord.web.commands.binding.value_types.WebUrl',
                'link.locutus.discord.web.commands.binding.value_types.WebValue',
                'link.locutus.discord.web.commands.binding.value_types.WebWarFinder',
                'link.locutus.discord.web.commands.binding.value_types.TaxExpenses',
                'link.locutus.discord.web.commands.binding.value_types.WebPermission',
                'link.locutus.discord.util.task.multi.MultiResult',
                'link.locutus.discord.util.task.multi.NetworkRow',
                'link.locutus.discord.util.task.multi.SameNetworkTrade',
                'link.locutus.discord.util.task.multi.AdvMultiReport',
                'link.locutus.discord.util.task.multi.AdvMultiRow',
        ]
        outputKind = 'module'
        nullableAnnotations = ['org.checkerframework.checker.nullness.qual.Nullable']
        nullabilityDefinition = 'undefinedInlineUnion'
        // set output file
        outputFile = file('../lc_cmd_react/src/lib/apitypes.d.ts')
    }
}

if (providers.environmentVariable("GITHUB_ACTOR").isPresent() &&
        providers.environmentVariable("GITHUB_TOKEN").isPresent()) {
    plugins.apply("maven-publish")
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/xdnw/locutus"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

def brotliVersion = "1.20.0"

dependencies {
    implementation 'org.msgpack:msgpack-core:0.9.10'
    implementation 'org.msgpack:jackson-dataformat-msgpack:0.9.10'
    implementation 'org.lz4:lz4-java:1.8.0'
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    implementation 'org.jgrapht:jgrapht-core:1.5.2'
    implementation 'org.jgrapht:jgrapht-ext:1.5.2'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.788')
    implementation 'com.amazonaws:aws-java-sdk-s3'

    implementation platform('org.apache.logging.log4j:log4j-bom:2.23.1')
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-api'

    implementation 'commons-logging:commons-logging:1.3.5'
    implementation("org.slf4j:slf4j-simple:2.1.0-alpha1")

    implementation 'com.pusher:pusher-java-client:2.4.4'

    implementation 'de.vandermeer:asciitable:0.3.2'

    implementation 'com.google.http-client:google-http-client-jackson2:1.47.1'

    implementation 'org.xerial:sqlite-jdbc:3.50.3.0'

    implementation 'com.google.code.gson:gson:2.13.1'
    implementation 'org.jsoup:jsoup:1.21.1'
    implementation 'org.bitbucket.cowwoc:diff-match-patch:1.2'

    implementation ('net.dv8tion:JDA:6.0.0-rc.2') {
        exclude module: 'opus-java'
    }
    implementation group: 'club.minnced', name: 'discord-webhooks', version: '0.8.4'


    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'gg.jte:jte:3.2.1'
    implementation 'gg.jte:jte-watcher:3.2.1'
    implementation 'io.javalin:javalin:6.7.0'
    implementation 'io.javalin.community.ssl:ssl-plugin:6.7.0'
    implementation 'io.javalin:javalin-rendering:6.7.0'

    implementation "com.aayushatharva.brotli4j:brotli4j:$brotliVersion"
    runtimeOnly("""com.aayushatharva.brotli4j:native-windows-x86_64:$brotliVersion""")

    implementation 'com.ptsmods:mysqlw:1.9.2'
    implementation 'org.openjdk.nashorn:nashorn-core:15.6'

    implementation 'de.erichseifert.gral:gral-core:0.11'

    implementation ('com.inversoft:prime-transformer:2.1.5') {
        exclude group: 'org.freemarker'
    }

    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.16'

    implementation group: 'com.opencsv', name: 'opencsv', version: '5.12.0'

    implementation 'in.wilsonl.minifyhtml:minify-html:0.15.0'

    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:11.1.0"


    implementation "io.github.kobylynskyi:graphql-java-codegen:5.4.0"

    implementation "org.apache.httpcomponents:httpclient:4.5.14"
    implementation "javax.validation:validation-api:2.0.1.Final"

//    implementation "org.mapstruct:mapstruct:1.4.2.Final"
//    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0-rc1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:3.0-rc5'

    implementation 'de.siegmar:fastcsv:4.0.0'


    implementation('org.jooq:jooq:3.19.13')
    compileOnly "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"


    implementation 'com.openai:openai-java:3.5.3'

    implementation 'com.google.genai:google-genai:1.11.0'
    implementation 'com.google.api-client:google-api-client:2.8.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.39.0'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20250616-2.0.0'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20250723-2.0.0'
    implementation 'com.google.apis:google-api-services-docs:v1-rev20250325-2.0.0'

    implementation 'com.google.cloud:google-cloud-vision:3.70.0'
    implementation 'com.google.cloud:google-cloud-language:2.74.0'

    implementation 'com.knuddels:jtokkit:1.1.0'
    implementation platform("ai.djl:bom:0.34.0")
    implementation "ai.djl:api:0.34.0"
    runtimeOnly "ai.djl.pytorch:pytorch-engine:0.34.0"
    runtimeOnly "ai.djl.pytorch:pytorch-model-zoo:0.34.0"
    implementation "ai.djl.huggingface:tokenizers:0.34.0"
//    runtimeOnly 'ai.djl.pytorch:pytorch-native-cu124:2.5.1:win-x86_64'
    runtimeOnly 'ai.djl.pytorch:pytorch-jni:2.7.1-0.34.0'
    implementation 'ai.djl.sentencepiece:sentencepiece:0.34.0'
    implementation 'cn.easyproject:easyocr:3.0.4-RELEASE'
    implementation 'com.vdurmont:emoji-java:5.1.1'
    implementation 'info.debatty:java-string-similarity:2.0.0'
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'

        resolutionStrategy {
            cacheDynamicVersionsFor 24, 'hours'
            cacheChangingModulesFor 24, 'hours'
        }
    }

}

if (useJooq) {
    dependencies {
        jooqGenerator("org.jooq:jooq-meta:3.19.13")
        jooqGenerator("org.jooq:jooq-codegen:3.19.13")
        jooqGenerator 'org.xerial:sqlite-jdbc:3.50.3.0'
    }
    jooq {
        version = "3.19.13"  // default (can be omitted)
        edition = JooqEdition.OSS  // default (can be omitted)
        configurations {
            bank {
                generateSchemaSourceOnCompilation = false; // default (can be omitted)
                generationTool {
                    jdbc {
                        driver = 'org.sqlite.JDBC'
                        url = 'jdbc:sqlite:database/bank.db'
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                        }
                        generate {
                            deprecated = false
                            records = true
                            immutablePojos = true
                            fluentSetters = true
                        }
                        target {

                            packageName = 'org.example.jooq.bank'
                        }
                        strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }

            locutus {
                generateSchemaSourceOnCompilation = false; // default (can be omitted)

                generationTool {
                    jdbc {
                        driver = 'org.sqlite.JDBC'
                        url = 'jdbc:sqlite:database/locutus.db'
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                        }
                        generate {
                            deprecated = false
                            records = true
                            immutablePojos = true
                            fluentSetters = true
                        }
                        target {
                            packageName = 'org.example.jooq.locutus'
                        }
                        strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }

            nations {
                generateSchemaSourceOnCompilation = false; // default (can be omitted)

                generationTool {
                    jdbc {
                        driver = 'org.sqlite.JDBC'
                        url = 'jdbc:sqlite:database/nations.db'
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                        }
                        generate {
                            deprecated = false
                            records = true
                            immutablePojos = true
                            fluentSetters = true
                        }
                        target {
                            packageName = 'org.example.jooq.nations'
                        }
                        strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }

            trade {
                generateSchemaSourceOnCompilation = false; // default (can be omitted)

                generationTool {
                    jdbc {
                        driver = 'org.sqlite.JDBC'
                        url = 'jdbc:sqlite:database/trade.db'
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                        }
                        generate {
                            deprecated = false
                            records = true
                            immutablePojos = true
                            fluentSetters = true
                        }
                        target {
                            packageName = 'org.example.jooq.trade'
                        }
                        strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }

            war {
                generateSchemaSourceOnCompilation = false; // default (can be omitted)

                generationTool {
                    jdbc {
                        driver = 'org.sqlite.JDBC'
                        url = 'jdbc:sqlite:database/war.db'
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                        }
                        generate {
                            deprecated = false
                            records = true
                            immutablePojos = true
                            fluentSetters = true
                        }
                        target {
                            packageName = 'org.example.jooq.war'
                        }
                        strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }

            web {
                generateSchemaSourceOnCompilation = false; // default (can be omitted)

                generationTool {
                    jdbc {
                        driver = 'org.sqlite.JDBC'
                        url = 'jdbc:sqlite:database/web.db'
                    }
                    generator {
                        name = 'org.jooq.codegen.DefaultGenerator'
                        database {
                            name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                        }
                        generate {
                            deprecated = false
                            records = true
                            immutablePojos = true
                            fluentSetters = true
                        }
                        target {
                            packageName = 'org.example.jooq.web'
                        }
                        strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                    }
                }
            }
        }
    }
}

// Enable when wanting to generate the classes (I currently run it once then disable)
//sourceSets.main.java.srcDirs (
//        tasks.named('generateBankJooq').flatMap { it.outputDir },
//        tasks.named('generateLocutusJooq').flatMap { it.outputDir },
//        tasks.named('generateNationsJooq').flatMap { it.outputDir },
//        tasks.named('generateTradeJooq').flatMap { it.outputDir },
//        tasks.named('generateWarJooq').flatMap { it.outputDir },
//        tasks.named('generateWebJooq').flatMap { it.outputDir }
//)

/**
 * Generate requests and model from external service
 */

def graphqlSchemasDir = layout.projectDirectory.dir("src/main/resources/graphql")
def graphqlGeneratedDir = layout.buildDirectory.dir("generated")

if (useGraphql) {
    apply plugin: 'io.github.kobylynskyi.graphql.codegen'
    tasks.named('graphqlCodegen', GraphQLCodegenGradleTask) {
        graphqlSchemas.rootDir = graphqlSchemasDir.asFile
        graphqlSchemas.includePattern = "schema\\.graphqls"   // adjust if multiple files

        outputDir = graphqlGeneratedDir.get().asFile
        outputs.dir(graphqlGeneratedDir)

        // Package / model settings
        modelPackageName = "com.politicsandwar.graphql.model"

        customTypesMapping = [
                Date        : "java.util.Date",
                DateTime    : "java.util.Date",
                DateTimeAuto: "java.time.Instant"
        ]
        useObjectMapperForRequestSerialization = [
                "DateTime",
                "DateTimeAuto",
                "java.util.Date",
        ]

        parentInterfaces {
            queryResolver = "graphql.kickstart.tools.GraphQLQueryResolver"
            mutationResolver = "graphql.kickstart.tools.GraphQLMutationResolver"
            subscriptionResolver = "graphql.kickstart.tools.GraphQLSubscriptionResolver"
            resolver = "graphql.kickstart.tools.GraphQLResolver<{{TYPE}}>"
        }

        generateApis = true
        generateClient = true
        generateParameterizedFieldsResolvers = false
        generateBuilder = true
        generateToString = true
        supportUnknownFields = true
        unknownFieldsPropertyName = "additionalFields"

        // Precise incremental inputs
        inputs.files(fileTree(graphqlSchemasDir) {
            include("**/*.graphqls")
        }).withPropertyName("graphqlSchemas").withPathSensitivity(PathSensitivity.RELATIVE)

        // Capture config that affects output so Gradle knows when to rerun
        inputs.property("graphqlCodegenConfigFingerprint", [
                generateApis,
                generateClient,
                generateBuilder,
                modelPackageName,
                customTypesMapping.hashCode(),
                parentInterfaces.queryResolver,
                parentInterfaces.mutationResolver,
                parentInterfaces.subscriptionResolver
        ].join("|"))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.fork = false
    options.verbose = false
    options.release = 22
    options.incremental = true
    options.compilerArgs += [
            "-parameters",
            "-Xmaxerrs", "1000",
            "-proc:none"
    ]
}

def explicitlyRequestsShadow = gradle.startParameter.taskNames.any { it == 'shadowJar' || it.endsWith(':shadowJar') }
def forcePrecompile = providers.gradleProperty('withJtePrecompile').isPresent()
def jteGeneratedDir = layout.buildDirectory.dir("generated-sources")

if (useJtePrecompile) {
    apply plugin: 'gg.jte.gradle'
    jte {
        sourceDirectory = file("src/main/jte").toPath()
        targetDirectory = layout.buildDirectory.dir("generated-sources").get().asFile.toPath()

        if (explicitlyRequestsShadow && forcePrecompile) {
            precompile()
        } else {
            generate()
        }
    }
}

if (useShadow) {
    apply plugin: 'com.gradleup.shadow'
    tasks.named('shadowJar') {
//    minimize()

        mustRunAfter tasks.matching { it.name == 'generateJte' || it.name == 'precompileJte' }

        zip64 = true
        archiveBaseName = "${name}-${project.name}"
        archiveClassifier.set('')
        from('src/main/resources') {
            include 'lib/win32-x86-amd64/brotli.dll'
        }
        manifest {
            attributes(
                    'Main-Class': 'link.locutus.discord.Locutus'
            )
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
//        resources {
//            srcDir 'src/main/resources'
//        }
    }
}

def addOptionalGeneratedSrc(String taskName, Provider<Directory> outputDir) {
    def task = tasks.findByName(taskName)
    if (task) {
        sourceSets.main.java.srcDir(tasks.named(taskName).map { outputDir.get().asFile })
        tasks.named('compileJava') { dependsOn tasks.named(taskName) }
    } else {
        sourceSets.main.java.srcDir(outputDir)
    }
}

def jooqGeneratedDir = layout.buildDirectory.dir("generated-src")

// GraphQL (optional)
addOptionalGeneratedSrc('graphqlCodegen', graphqlGeneratedDir)

// JTE: prefer precompile if present, otherwise generate
def jteTask = tasks.findByName('precompileJte') ?: tasks.findByName('generateJte')
if (jteTask) {
    sourceSets.main.java.srcDir(tasks.named(jteTask.name).map { jteGeneratedDir.get().asFile })
    tasks.named('compileJava') { dependsOn tasks.named(jteTask.name) }
} else {
    sourceSets.main.java.srcDir(jteGeneratedDir)
}

// legacy fallback dir (always present on classpath)
sourceSets.main.java.srcDir(jooqGeneratedDir)

// Optional: clean generated outputs
tasks.named('clean') {
    delete(graphqlGeneratedDir, jteGeneratedDir, jooqGeneratedDir)
}